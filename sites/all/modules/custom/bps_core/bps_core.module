<?php
/**
 * Implements hook_form_alter().
 */
function bps_core_form_alter(&$form, &$form_state, $form_id) {
 if ($form_id == 'ordenes_node_form') {
   $module_path = drupal_get_path('module', 'bps_core');
   drupal_add_css($module_path . '/css/bps_core.css');
   drupal_add_js($module_path . '/js/bps_core.js');
   drupal_add_js($module_path . '/js/bps_ordenes.js');
   dpm($form['field_ord_cliente']);
	 $options = array();
   $options[] = '- Seleccionar -';
   $form['field_ord_cliente']['#prefix'] = '<div class="cliente-sucursal">';
   $tmp_element = $form['field_ord_cliente'];
   $form['field_ord_cliente'] = array();
  $form['field_ord_cliente']['und'][0]['target_id'] = array(
    '#type'=>'textfield',
    '#title'=>'Cliente',
    '#attributes'=>array('class'=>array('ee-autocomplete'),'autocomplete' => 'off','data-type'=>'cliente','data-select'=>'populate_sucursal','data-id-element'=>'edit-field-ord-sucursal-item'),
    '#default_value'=>'',
    '#prefix' => '<div class="cliente-sucursal">',
  );

   $form['field_ord_sucursal_item'] = array(
    '#type' => 'select',
    '#title' => 'Sucursal',
    '#options' => $options,
    '#weight' => 3,
    '#suffix' => '</div>',
    '#validated' => TRUE,
   );
   $form['#group_children']['field_ord_sucursal_item'] = 'group_info_general';
   $form['#validate'][] = '_validate_ordenes';
   $form['field_ord_tipo']['und']['#attributes'] = array('class'=>array('tipo_orden'));
   drupal_add_library('system', 'ui.autocomplete');


   //dpm($form);
 }
 if ($form_id == 'cotizaciones_node_form') {
   $size = count($form['field_referencias']['und']);
   $module_path = drupal_get_path('module', 'bps_core');
   drupal_add_js($module_path . '/js/bps_core.js');
   drupal_add_css($module_path . '/css/bps_core.css');
   foreach ($form['field_referencias']['und'] as $key => $value) {
     if (is_numeric($key)) {
       $form['field_referencias']['und'][$key]['field_porcentaje_impuesto']['und'][0]['value']['#size']=3;
       $form['field_referencias']['und'][$key]['field_porcentaje_impuesto']['und'][0]['value']['#attributes']= array('class'=>array('porcentaje_impuesto'));
       $form['field_referencias']['und'][$key]['field_descuento']['und'][0]['value']['#size']=3;
       $form['field_referencias']['und'][$key]['field_descuento']['und'][0]['value']['#attributes']= array('class'=>array('descuento'));
       $form['field_referencias']['und'][$key]['field_ref_cantidad']['und'][0]['value']['#size']=4;
       $form['field_referencias']['und'][$key]['field_ref_cantidad']['und'][0]['value']['#attributes']= array('class'=>array('cantidad'));
       $form['field_referencias']['und'][$key]['field_valor_unitario']['und'][0]['value']['#size']=9;
       $form['field_referencias']['und'][$key]['field_valor_unitario']['und'][0]['value']['#attributes']= array('class'=>array('valor_unitario'));
       $form['field_referencias']['und'][$key]['field_valor_iva']['und'][0]['value']['#attributes'] = array('readonly'=>array('true'));
       $form['field_referencias']['und'][$key]['field_total']['und'][0]['value']['#attributes'] = array('readonly'=>array('true'));
     } 
   }
   $form['total_cotizacion'] = array(
    '#type' => 'fieldset',
    '#title' => 'Totales',
    '#disabled' => TRUE,
    '#size' => 9,
    '#weight' => 4.5,
    '#attributes' => array('class'=>array('fliedset_totales')), 
   );

   $form['total_cotizacion']['subtotal'] = array(
    '#type' => 'textfield',
    '#title' => 'Subtotal',
    '#disabled' => TRUE,
    '#size' => 9,
    '#weight' => 5,
    '#attributes' => array('class'=>array('totales')), 
   );
   $form['total_cotizacion']['descuentos'] = array(
    '#type' => 'textfield',
    '#title' => 'Descuentos',
    '#disabled' => TRUE,
    '#size' => 9,
    '#weight' => 6,
    '#attributes' => array('class'=>array('totales')), 
   );
   $form['total_cotizacion']['total_iva'] = array(
    '#type' => 'textfield',
    '#title' => 'Iva',
    '#disabled' => TRUE,
    '#size' => 9,
    '#weight' => 7,
    '#attributes' => array('class'=>array('totales')), 
   );
   $form['total_cotizacion']['total_cotizacion'] = array(
    '#type' => 'textfield',
    '#title' => 'Total',
    '#disabled' => TRUE,
    '#size' => 9,
    '#weight' => 8,
    '#attributes' => array('class'=>array('totales')), 
   );
 }
 if ($form_id == 'field-collection-item-form'){
   $form['field_ref_cantidad']['und'][0]['value'] = array('class'=>array('cantidad'));
 }

 if ($form_id == 'erpal_contact_node_form') {
   $form['#validate'][] = '_validate_custom_contact';
 }
 
 if ($form_id == 'equipos_laboratorio_node_form') {
   $options = array();
   $default_value = 0;
   $options[] = '- Seleccionar -';
   if (isset($form['#node']->nid) && !empty($form['#node']->nid) && is_numeric($form['#node']->nid) && $form['#node']->nid > 0) {
     if (isset($form['#node']->field_el_cliente['und'][0]['target_id'])) {
       $default_value = isset($form['#node']->field_orden['und'][0]['target_id']) ? $form['#node']->field_orden['und'][0]['target_id'] : 0;
       $options_tmp = _get_ajax_ordenes($form['#node']->field_el_cliente['und'][0]['target_id'], FALSE);  
       if (count($options_tmp) > 0) {
         $options += $options_tmp;
       }
     }
   }
   $form['field_orden'] = array(
    '#type' => 'select',
    '#title' => 'Orden de servicio',
    '#options' => $options,
    '#weight' => 3,
    '#suffix' => '</div>',
    '#default_value' => $default_value,
    '#validated' => TRUE,
   );
   $module_path = drupal_get_path('module', 'bps_core');
   drupal_add_js($module_path . '/js/bps_equipo_laboratorio.js');
   $form['#validate'][] = '_validate_custom_laboratorio';
 }


}

function _validate_custom_laboratorio($form, &$form_state) {
  $values = $form_state['values'];
  if (isset($values['field_orden']) && !empty($values['field_orden'])) {
    $form_state['values']['field_orden'] = array('und' => array(array('target_id' => $values['field_orden'])));
  }
}

/**
 * Function validate id unique
 */ 
function _validate_custom_contact($form, &$form_state) {
  $values = $form_state['values'];
  if (isset($values['op']) && $values['op'] == 'Guardar') {
    if (isset($values['field_documento_identidad']['und'][0]['value']) && !empty($values['field_documento_identidad']['und'][0]['value'])) {
      $query = db_select('field_data_field_documento_identidad', 'i');
      $query->addField('i','entity_id','nid');
      $query->condition('i.field_documento_identidad_value',$values['field_documento_identidad']['und'][0]['value']);
      $result = $query->execute()->fetchObject();
      if (isset($result->nid) && !empty($result->nid) && is_numeric($result->nid) && $result->nid > 0) {
        form_set_error('field_documento_identidad', 'El documento de identidad ya existe en la base de datos');
      }
    }    
  }
  else {
    if (isset($values['op']) && $values['op'] == 'Eliminar') { 
      if (_has_relations($values['nid'])){
        form_set_error('field_documento_identidad', 'El documento de identidad tiene ordenes de servicio o cotizaciones relacionadas'); 
      }
    }
  }
}
/**
 * function that verify if the entity contact has relations
 */
function _has_relations($nid) {
  $flag_has_relations = FALSE;
  $query = db_select('field_data_field_ord_cliente', 'o');
  $query->addField('o','entity_id','nid');
  $query->condition('o.field_ord_cliente_target_id',$nid);
  $ord = $query->execute()->fetchObject();
  if (isset($ord->nid) && !empty($ord->nid) && is_numeric($nid) && $ord->nid > 0) {
    return TRUE;
  }
  if (!$flag_has_relations) {
    $query = db_select('field_data_field_cliente', 'c');
    $query->addField('c','entity_id','nid');
    $query->condition('c.field_cliente_target_id',$result->nid);
    $cot = $query->execute()->fetchObject();
    if (isset($cot->nid) && !empty($cot->nid) && is_numeric($cot->nid) && $cot->nid > 0) {
      return TRUE;
    }
  }
  if (!$flag_has_relations) {
    $query = db_select('field_data_field_el_cliente', 'e');
    $query->addField('e','entity_id','nid');
    $query->condition('e.field_el_cliente_target_id',$nid);
    $el = $query->execute()->fetchObject();
    if (isset($el->nid) && !empty($el->nid) && is_numeric($el->nid) && $el->nid > 0) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function bps_core_menu() { 
   $items = array();

   $items['bps/ajax/sucursales/%'] = array(
    'title' => 'Sucursales',
    'page callback' => '_get_ajax_sucursales',
    'access callback' => TRUE,
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

   $items['bps/ajax/ordenes/%'] = array(
    'title' => 'Sucursales',
    'page callback' => '_get_ajax_ordenes',
    'access callback' => TRUE,
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

   $items['bps/pdf/%'] = array(
    'title' => 'pdf',
    'page callback' => 'bps_pdf_html',
    'access callback' => TRUE,
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['ee/autocompletar/%/%'] = array(
    'title' => '', 
    'page callback' => 'bps_autocomplete', 
    'access arguments' => array('access content'), 
    'page arguments' => array(2,3),
    'type' => MENU_CALLBACK,
  );  


   return $items;
}
/**
 * Function that load branch offices of contact
 */
function bps_pdf_html($nid) {
  $node = node_load($nid);
  $html = '';
  switch ($node->type) {
    case 'cotizaciones':
      $html = theme('cotizacion_pdf', array('node' => $node));
      break;
    case 'ordenes':
      $html = theme('orden_pdf', array('node' => $node));
      break;
  }
  //return $html;
  pdf_using_mpdf_api($html);
}

/**
 * Function that load branch offices of contact
 */
function _get_ajax_sucursales($nid) {
  $contact = node_load($nid);
  $options = array();
  if (isset($contact->field_addresses)) {
    foreach ($contact->field_addresses['und'] as $key => $item) {
       $address = field_collection_item_load($item['value']);
       $options[$item['value']] = $address->field_address_name['und'][0]['value'] . ' - ' .$address->field_addition_to_address['und'][0]['value'];
    }
  }

  return  drupal_json_output($options);
}
/**
 * Function that load branch offices of contact
 */
function _get_ajax_ordenes($nid, $flag_json = TRUE) {
  $query = db_select('field_data_field_ord_cliente', 'o');
  $query->join('field_data_field_ord_estado', 'e', 'e.entity_id=o.entity_id');
  $query->join('field_data_field_ord_tipo' ,'t', 't.entity_id=o.entity_id');
  $query->addField('o','entity_id','nid');
  $query->condition('o.field_ord_cliente_target_id',$nid);
  // ordenes de tipo 2 = orden de trabajo
  $query->condition('t.field_ord_tipo_value',2);
  // estado en ejecucion = 1
  $query->condition('e.field_ord_estado_value',1);
  $result = $query->execute()->fetchAll();
  foreach ($result as $row) {
    $ord = node_load($row->nid);
    $options[$row->nid] = $ord->title . ' (' . $row->nid . ')';
  }
  if ($flag_json) {
    return  drupal_json_output($options);  
  }
  else {
   return $options;   
  }
  
}

/**
 * Function that verify branch office  in submit order
 */
function _validate_ordenes($form, &$form_state) {
   $values = $form_state['values'];
   if (isset($values['field_ord_sucursal_item']) && !empty($values['field_ord_sucursal_item'])) {
     $address = field_collection_item_load($values['field_ord_sucursal_item']);
     $form_state['values']['field_ord_sucursal_id']['und'][0]['value'] = $values['field_ord_sucursal_item'];
     $form_state['values']['field_ord_sucursal']['und'][0]['value'] = $address->field_address_name['und'][0]['value'] . ' - ' .$address->field_addition_to_address['und'][0]['value'];
   }
   else {
    form_set_error('field_ord_sucursal_item', 'Debe seleccionar una sucursal.');
   }

}
/**
 * Implements hook node view
 */
function bps_core_node_view($node, $view_mode) {
  if ($node->type == 'cotizaciones') {
    $module_path = drupal_get_path('module', 'bps_core');
    drupal_add_js($module_path . '/js/bps_view_cotizacion.js'); 
  }
}

function bps_core_theme() {
    return array(
        'cotizacion_pdf' => array(
            'variables' => array('node' => NULL),
            'template' => 'templates/cotizacion',
        ),
        'orden_pdf' => array(
            'variables' => array('node' => NULL),
            'template' => 'templates/orden',
        ),
    );
}

function ee_autocomplete($type, $text, $nid = NULL, $filters = NULL) {
  $query = db_select('node', 'n');
  $query->fields('n', array('title', 'nid'));
  if (isset($_GET['filters'])) {
    $parameters = json_decode(base64_decode($_GET['filters']));
    $filters = array();
    foreach ($parameters as $key => $value) {
      if (isset($value->or)) {

      }
      $filters[] = (array) $value;
    }
  }
  if (!is_null($filters)) {
    foreach ($filters as $key => $filter) {
      if (isset($filter['field'])) {
        $query->join('field_data_' . $filter['field'], $filter['field'], $filter['field'] . '.entity_id = n.nid');
        $query->condition($filter['field'] . '.' . $filter['field'] . '_' . $filter['type'], $filter['value'], $filter['operator']);
      }
      else {
        $or = db_or();
        foreach ($filter as $keyOr => $valueOr) {
          $filter_or = (array) $valueOr;
          if (isset($filter_or['multiple']) && $filter_or['multiple']) {
            $andJoin = ' and ' . $filter_or['field'] . '.' . $filter_or['field'] . '_' . $filter_or['type'] . '=' . $filter_or['value'];
            $query->leftJoin('field_data_' . $filter_or['field'], $filter_or['field'], $filter_or['field'] . '.entity_id = n.nid' . $andJoin);
          }
          else {
            $query->join('field_data_' . $filter_or['field'], $filter_or['field'], $filter_or['field'] . '.entity_id = n.nid');
          }
          $or->condition($filter_or['field'] . '.' . $filter_or['field'] . '_' . $filter_or['type'], $filter_or['value'], $filter_or['operator']);
        }
        $query->condition($or);
      }
    }
  }
  $query->orderBy('n.title', 'ASC');
  $query->condition('n.type', $type, '=');
  if ($nid == "autocomplete") {
    $query->condition('n.nid', $text, '=');
  }
  elseif (is_null($nid)) {
    if (!empty($text)) {
      $query->condition('n.title', '%' . $text . '%', 'LIKE');
    }
  }
  else {
    $query->condition('n.nid', $nid, '=');
  }

  $result  = $query->execute()->fetchAll();
  $options = array();
  foreach ($result as $row) {
    if ($type == 'cliente') {
      $options[] = array('description' => $row->title . ' (' . $row->nid . ')', 'id' => $row->nid);
    }
    else {
      $data_node = node_load($row->nid);
      $options[] = array('description' => $row->title . ' (' . $row->nid, 'id' .')' => $row->nid, "data" => json_encode($data_node));
    }
  }
  if (is_null($nid) || $nid == 'autocomplete') {
    drupal_json_output($options);
  }
  else {
    return $options[0]['description'];
  }
}



